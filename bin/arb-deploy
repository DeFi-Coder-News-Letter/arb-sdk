#!/usr/bin/env python3

# Copyright 2019, Offchain Labs, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

### ----------------------------------------------------------------------------
### arb-deploy
### ----------------------------------------------------------------------------

import argparse
import datetime
import os
import pkg_resources
import platform
import subprocess
import sys

# package configuration
NAME = 'arb-deploy'
DESCRIPTION = 'Manage Arbitrum dockerized deployments'
__version__ = pkg_resources.require(NAME)[0].version

# arb-validator and arb-ethbridge version fetched if the DEPLOY_DIR does not
# exist AND the -d or --dev-mode flag is not given
RELEASE_VERSION='v0.1.0'

# filename constants
DOCKER_COMPOSE_FILENAME='docker-compose.arb-deploy.yml'
VALIDATOR_STATE_DIRNAME='validator-states/validator'

# Relative dir name for deployment dependencies
DEPLOY_DIR='compose'

# Language types
JS = 'js'
GO = 'go'
CPP = 'cpp'

# Dependencies ('repository', LANG, ['DirectDependencies',])
DEPS = [('arb-ethbridge', JS, []),
        ('arb-validator', GO, ['arb-util', 'arb-avm']),
        ('arb-avm-cpp', CPP, []),
        ('arb-truffle-provider', JS, []),
        ('arb-web3-provider', JS, ['arb-ethers-provider']),
 ]
EXTERNAL_DEPS = [
    ('arb-sdk', 'arb-deploy'),
    ('arbc-solidity', 'arbc-truffle-compile'),
]
ALL_REPOS = ([d[0] for d in DEPS] +
             [d for ds in DEPS for d in ds[2]] +
             [d[0] for d in EXTERNAL_DEPS])

# Formatting
RED= '\033[91m'
BOLD='\033[1m'
END='\033[0m'

### ----------------------------------------------------------------------------
### docker-compose template
### ----------------------------------------------------------------------------

# Parameters: mnemonic, number of validators, gas per wallet, gas limit, verbose,
# absolute path to state folder, absolute path to contract
COMPOSE_HEADER=(
"""# Machine generated by `arb-deploy`. Do not version control.
version: '3'
services:
    arb-ethbridge:
        image: arb-ethbridge
        build:
#           context: https://github.com/OffchainLabs/arb-ethbridge.git#v0.1.0
            context: %s
            args:
                MNEMONIC: '%s'
                NUM_WALLETS: %d
                NUM_VALIDATORS: %d
                GAS_PER_WALLET: %d
                GAS_LIMIT: %d
                VERBOSE: '%s'
                PORT: 7545
                CANARY_PORT: 17545
        ports:
            - '7545:7545'
            - '17545:17545'

    arb-validator-coordinator:
        depends_on:
            - arb-ethbridge
        volumes:
            - %s:/home/user/state
            - %s:/home/user/contract.ao
        image: arb-validator
        build:
#           context: https://github.com/OffchainLabs/arb-validator.git#v0.1.0
            context: %s
            dockerfile: %s
            args:
                WAIT_FOR: 'arb-ethbridge:17545'
                ETH_URL: 'ws://arb-ethbridge:7545'
                ID: 0
        ports:
            - '1235:1235'
            - '1236:1236'
""")

def compose_header(cethbridge, mnemonic, num_wallets, num_validators,
    gas_per_wallet, gas_limit, verbose, state_abspath, contract_abspath,
    cvalidator, dockerfile):
    return (COMPOSE_HEADER % (cethbridge, mnemonic, num_wallets, num_validators,
                              gas_per_wallet, gas_limit, verbose, state_abspath,
                              contract_abspath, cvalidator, dockerfile))

# Parameters: validator id, absolute path to state folder,
# absolute path to contract, validator id
COMPOSE_VALIDATOR=(
"""
    arb-validator%d:
        depends_on:
            - arb-validator-coordinator
        volumes:
            - %s:/home/user/state
            - %s:/home/user/contract.ao
        image: arb-validator
        environment:
            WAIT_FOR: 'arb-validator-coordinator:1236'
            ETH_URL: 'ws://arb-ethbridge:7545'
            COORDINATOR_URL: 'wss://arb-validator-coordinator:1236/ws'
            ID: %d

""")

# Returns one arb-validator declaration for a docker compose file
def compose_validator(validator_id, state_abspath, contract_abspath):
    return (COMPOSE_VALIDATOR % (validator_id, state_abspath, contract_abspath,
        validator_id))

### ----------------------------------------------------------------------------
### .git/hooks/pre-commit
### ----------------------------------------------------------------------------

GIT_PRE_COMMIT_HOOK=(
"""
#!/bin/sh

# Prevent commit if go.mod contains a replace rule
ERR_MOD="Error: do not commit go.mod without removing all replace rules"
git grep --cached -q "replace .* => .*" go.mod && echo "${ERR_MOD}" && exit 1 \
    || true

# Prevent commit if `gofmt -l .` produces any output
ERR_FMT="Error: please run \`go fmt ./...\` before committing changes"
gofmt -l $(git diff-index --cached --name-only HEAD | grep ".go") | \
    grep -q '^' && echo "${ERR_FMT}" && exit 1 || true
""")

### ----------------------------------------------------------------------------
### Build cache starter
### ----------------------------------------------------------------------------

DOCKERFILE_CACHE=(
"""
FROM alpine:3.9
RUN mkdir -p /build
FROM scratch
COPY --from=0 /build /build
"""
)

### ----------------------------------------------------------------------------
### Deploy
### ----------------------------------------------------------------------------

# Compile contracts to `contract.ao` and export to Docker and run validators
def deploy(contract_name, n_validators, mnemonic, verbose, gas_per_wallet,
           gas_limit, dev_flag, sudo_flag, build_flag, up_flag):
    # Install dev_mode if flag set and doesn't exist already
    if dev_flag and not os.path.isdir(DEPLOY_DIR):
        install_dev_mode(sudo_flag)

    # In dev-mode, create empty build caches if necessary
    if dev_flag or os.path.isdir(DEPLOY_DIR):
        def warm_build_cache(name):
            if run('docker images -q %s' % name, check_output=True, sudo=sudo_flag) == '':
                run('mkdir -p %s/.tmp' % DEPLOY_DIR)
                run('echo "%s" > %s/.tmp/Dockerfile' % (DOCKERFILE_CACHE, DEPLOY_DIR))
                run('docker build -t %s %s/.tmp' % (name, DEPLOY_DIR), sudo=sudo_flag)
                run('rm -rf %s/.tmp' % DEPLOY_DIR)
        warm_build_cache('arb-validator')
        warm_build_cache('arb-avm-cpp')

    # Create VALIDATOR_STATE_DIRNAME s if they don't exist
    states_path = os.path.abspath(VALIDATOR_STATE_DIRNAME)
    for i in range(n_validators):
        if not os.path.isdir(VALIDATOR_STATE_DIRNAME + str(i)):
            os.makedirs(states_path + str(i))

    # Check for DOCKER_COMPOSE_FILENAME and halt if running
    if os.path.isfile('./' + DOCKER_COMPOSE_FILENAME):
        run('docker-compose -f ./%s down -t 0' % DOCKER_COMPOSE_FILENAME,
            sudo=sudo_flag, exit_on_error=False)
    # Kill and rm all docker containers and images created by any `arb-deploy`
    ps = "grep 'arb-validator\|arb-ethbridge' | awk '{ print $1 }'"
    if run('docker ps | ' + ps, check_output=True, sudo=sudo_flag) != '':
        run('docker kill $(' + ('sudo ' if sudo_flag else '') + 'docker ps | ' + ps + ')',
            exit_on_error=False, sudo=sudo_flag)
        run('docker rm $(' + ('sudo ' if sudo_flag else '') + 'docker ps -a | ' + ps + ')',
            exit_on_error=False, sudo=sudo_flag)

    # number of wallets
    n_wallets = n_validators + 100

    # docker-compose build context
    context = 'https://github.com/OffchainLabs/%s.git#' + RELEASE_VERSION
    if dev_flag or os.path.isdir(DEPLOY_DIR):
        context = './' + DEPLOY_DIR + '/' + '%s'

    # dockerfile_dev_mode
    dockerfile = dockerfile_dev_mode(dev_flag, 'dev-mode.Dockerfile')

    # Overwrite DOCKER_COMPOSE_FILENAME
    compose = os.path.abspath('./' + DOCKER_COMPOSE_FILENAME)
    contract = os.path.abspath(contract_name)
    contents = (
        compose_header(
            context % 'arb-ethbridge',
            mnemonic,
            n_wallets,
            n_validators,
            gas_per_wallet,
            gas_limit,
            verbose,
            states_path + str(0),
            contract,
            context % 'arb-validator',
            dockerfile,
        ) + ''.join([compose_validator(i, states_path + str(i), contract)
                        for i in range(1, n_validators)]))
    with open(compose, 'w') as f:
        f.write(contents)

    # Build
    if not up_flag or build_flag:
        run('docker-compose -f %s build' % compose, sudo=sudo_flag)

    # Run
    if not build_flag or up_flag:
        run('docker-compose -f %s up --abort-on-container-exit' % compose,
            sudo=sudo_flag)

# Installs DEPS and links them correctly
# Also adds pre-commit hook to prevent committing
# this development rule and does go formatting check
def install_dev_mode(sudo_flag):
    GC = 'git clone --recurse-submodules https://github.com/OffchainLabs/%s.git ./' + DEPLOY_DIR + '/%s'
    run('mkdir ' + DEPLOY_DIR)
    # Add git pre-commit hooks to golang repos
    def add_commit_hook(repo):
        with open(repo + '/.git/hooks/pre-commit', 'w') as f:
            f.write(GIT_PRE_COMMIT_HOOK)
        run('chmod +x ' + repo + '/.git/hooks/pre-commit')
    def symlink(repo, parent=None):
        if os.path.isdir('node_modules'):
            run('rm -rf node_modules/%s && ln -sf ../%s/%s node_modules/%s' %
                (repo, DEPLOY_DIR, repo, repo))
            if parent is not None:
                run('rm -rf %s/%s/node_modules/%s && ln -sf ../../%s %s/%s/node_modules/%s' %
                    (DEPLOY_DIR, parent, repo, repo, DEPLOY_DIR, parent, repo))
    def language_setup(lang, repo, parent=None):
        if lang == JS:
            run('yarn --cwd %s/%s' % (DEPLOY_DIR, repo))
            symlink(repo, parent=parent)
        else: # lang == GO or CPP
            add_commit_hook('%s/%s' % (DEPLOY_DIR, repo))
    for (dep, lang, sub_deps) in DEPS:
        run(GC % (dep, dep))
        for sub_dep in sub_deps:
            run(GC % (sub_dep, dep + '/' + sub_dep))
            run('ln -sf %s/%s %s/%s' % (dep, sub_dep, DEPLOY_DIR, sub_dep))
            language_setup(lang, sub_dep, parent=dep)
        language_setup(lang, dep)

# Create special Dockerfile for dev-mode if required
def dockerfile_dev_mode(dev_flag, name):
    SUB = 'awk \'{ sub(/%s/, "%s") }1\' ' + ('%s/arb-validator/Dockerfile > ' +
        '%s/arb-validator/%s') % (DEPLOY_DIR, DEPLOY_DIR, name)
    if dev_flag or os.path.isdir(DEPLOY_DIR):
        run(SUB % ('##DEV_', ''))
        return name
    else:
        return 'Dockerfile'

# Run commands in shell
def run(command, sudo=False, exit_on_error=True, quiet=False, check_output=False):
    if sudo:
        command = 'sudo ' + command
    if not quiet:
        print(BOLD + '$ %s\n' % command + END)
    if check_output:
        try:
            return subprocess.check_output(command, shell=True).decode('utf-8')
        except subprocess.CalledProcessError as e:
            if exit_on_error:
                sys.exit(1)
            else:
                return ''
    else:
        retval = os.system(command)
        if exit_on_error and retval != 0:
            sys.exit(1)
        else:
            return retval

### ----------------------------------------------------------------------------
### Command line interface
### ----------------------------------------------------------------------------

# Status
class get_git_status(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        msg = ''
        deploy_dir = ''
        if os.path.isdir(DEPLOY_DIR):
            deploy_dir = os.path.abspath(DEPLOY_DIR)
        elif '/' + DEPLOY_DIR + '/' in (os.path.abspath('.') + '/'):
            deploy_dir = os.path.abspath('.').rsplit(DEPLOY_DIR, 1)[0] + DEPLOY_DIR
        if deploy_dir != '':
            headers = ['Repo', 'Branch', 'Commit ', ' M ']
            def git_status(path):
                """ Returns (branch name, short hash, if is modified) """
                return (run('cd %s && git rev-parse --abbrev-ref HEAD' %
                            path, check_output=True, quiet=True).strip(),
                        run('cd %s && git rev-parse --short HEAD' % path,
                            check_output=True, quiet=True).strip(),
                        run('cd %s && git diff --stat'
                                 % path, exit_on_error=False, quiet=True, check_output=True) != '')
            def find(repo):
                if os.path.isdir(deploy_dir + '/' + repo):
                    path = deploy_dir + '/' + repo
                else:
                    return [repo, '', '???????', '']
                (branch_nom, short_hash, is_modified) = git_status(path)
                return [repo, branch_nom, short_hash, is_modified]
            data = []
            for (dep, lang, sub_deps) in DEPS:
                data += [find(dep)]
                for sub_dep in sub_deps:
                    data += [find(sub_dep)]
            def find_ext_dep(name, cmd):
                bin_path = run('which %s' % cmd, check_output=True, quiet=True).strip()
                file_path = run('cat %s | grep "__file__ ="' % bin_path, check_output=True,
                            quiet=True, exit_on_error=False)[len("__file__ = '"):-1]
                if file_path:
                    parent_dir = os.path.dirname(file_path)
                    (branch_nom, short_hash, is_modified) = git_status(parent_dir)
                else:
                    (branch_nom, short_hash, is_modified) = ("", "???????", False)
                return [name, branch_nom, short_hash, is_modified]
            ext_data = []
            for (name, dep) in EXTERNAL_DEPS:
                ext_data += [find_ext_dep(name, dep)]
            # get status of current project i.e. demo-dapp-pet-shop
            current_name = os.path.splitext(os.path.basename(
                run('git config --get remote.origin.url', check_output=True,
                    quiet=True, exit_on_error=False)))[0].strip()
            if current_name != '' and current_name not in ALL_REPOS:
                (branch_nom, short_hash, is_modified) = git_status(os.getcwd())
                ext_data += [[current_name, branch_nom, short_hash, is_modified]]
            repo_width = max(len(row[0]) for row in [headers] + data + ext_data) + 2
            branch_width = max(len(row[1]) for row in [headers] + data + ext_data) + 2
            commit_width = len('175e1d0') + 2
            total_width = repo_width + branch_width + commit_width + len('[+]')
            msg += ' DEV MODE '.center(total_width, '-') + '\n'
            msg += (headers[0].ljust(repo_width) + headers[1].ljust(branch_width) +
                    headers[2].ljust(commit_width) + headers[3] + '\n')
            def format_row(row):
                return ((RED if '?' in row[2] else BOLD if row[3] else '') +
                        row[0].ljust(repo_width) + row[1].ljust(branch_width) +
                        row[2].ljust(commit_width) + ('[+]' if row[3] else '') +
                        END + '\n')
            for row in data:
                msg += format_row(row)
            msg += ''.center(total_width, '-') + '\n'
            for row in ext_data:
                msg += format_row(row)
            msg += ''.center(total_width, '-') + '\n'
            msg += 'Path: %s\n' % deploy_dir
        else:
            adv = run('arb-deploy --version', check_output=True, quiet=True,
                       exit_on_error=False).strip()
            acv = run('arbc-truffle-compile --version', check_output=True,
                       quiet=True, exit_on_error=False).strip()
            ts = 'Timestamp: %s' % datetime.datetime.now()
            p = ' Platform: %s' % platform.platform()
            total_width = max([len(adv), len(acv), len(ts), len(p)])
            msg += ' arb-deploy '.center(total_width, '-') + '\n'
            msg += adv + '\n' + acv + '\n' + ts + '\n' + p + '\n'
            msg += ' truffle version '.center(total_width, '-') + '\n'
            msg += run('truffle version', check_output=True, quiet=True, exit_on_error=False).strip() + '\n'
            msg += ''.center(total_width, '-') + '\n'
        parser._print_message(msg, sys.stdout)
        parser.exit()

def main():
    parser = argparse.ArgumentParser(
        prog=NAME,
        description=DESCRIPTION)
    # Required
    parser.add_argument('contract',
        help='The Arbitrum bytecode contract to deploy.')
    parser.add_argument('n_validators', type=int,
        help='The number of validators to deploy.')
    # Optional
    parser.add_argument('-d', '--dev-mode', action='store_true', dest='dev',
        help=(('Downloads dependencies into `%s` and links them if `%s` does ' +
        'not already exist. Note: if `%s` does exist in the current working ' +
        'directory then dev-mode will always be used, even without this flag')
        % (DEPLOY_DIR, DEPLOY_DIR, DEPLOY_DIR)))
    group = parser.add_mutually_exclusive_group()
    group.add_argument('-b', '--build-only', action='store_true', dest='build_only',
        help='Run docker-compose build only')
    group.add_argument('-u', '--up-only', action='store_true', dest='up_only',
        help='Run docker-compose up only')
    parser.add_argument('-s', '--sudo', action='store_true', dest='sudo',
        help='Run docker-compose with sudo. May be helpful for some platforms')
    # Ganache Options
    parser.add_argument('-l', '--gasLimit', type=int,
        dest='gas_limit', default=6721975,
        help='The block gas limit in wei [ganache-cli parameter]')
    parser.add_argument('-e', '--defaultBalanceEther', type=int,
        dest='gas_per_wallet', default=100,
        help='Amount of ether to assign each test account [ganache-cli parameter]')
    parser.add_argument('-m', '--mnemonic', type=str, dest='mnemonic',
        default='jar deny prosper gasp flush glass core corn alarm treat leg smart',
        help='Specify the Mnemonic to use (make sure to use "quotes")')
    parser.add_argument('-v', '--verbose', dest='verbose', action='count')
    parser.add_argument('--status', action=get_git_status, nargs=0)
    # Version
    # TODO attach commit hash to version if one exists in dev mode
    parser.add_argument('--version', action='version',
        version='%(prog)s ' + __version__)
    args = parser.parse_args()

    # Set verbose to Ganache parameter
    verboseFlag = '-q'
    if args.verbose is not None:
        if args.verbose == 1:
            verboseFlag = ''
        elif args.verbose == 2:
            verboseFlag = '-v'
        elif args.verbose > 2:
            verboseFlag = '-v --debug'

    # Deploy
    deploy(args.contract, args.n_validators, args.mnemonic, verboseFlag,
           args.gas_per_wallet, args.gas_limit, args.dev, args.sudo,
           args.build_only, args.up_only)

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
